name: CI

on:
  push:
    branches: [main]
  pull_request: {}

jobs:
  eslint:
    runs-on: ubuntu-latest
    strategy:
        matrix:
          node-version: ['lts/jod']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache node modules
      uses: actions/cache@v4
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        # not caching node_modules because `npm ci` removes it
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Install dependencies
      run: npm ci
    - name: Run eslint
      run: npm run lint
  jest:
    needs: [eslint]
    runs-on: ubuntu-latest
    strategy:
        matrix:
          node-version: ['lts/jod']
          shard: [1/3, 2/3, 3/3]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache node modules
      uses: actions/cache@v4
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        # not caching node_modules because `npm ci` removes it
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Install dependencies
      run: npm ci
    - name: Copy secrets example file
      run: npm run copy-secrets
    - name: Prepare for jest tests
      run: npm run jest:prepare-ci
    - name: Run Jest tests
      run: npm run silent-test -- --shard=${{ matrix.shard }}
    - name: Upload coverage to codecov
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  playwright:
    needs: [eslint]
    runs-on: ubuntu-latest
    strategy:
        fail-fast: false
        matrix:
          node-version: ['lts/jod']
          shard: [1/3, 2/3, 3/3]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache node modules
      uses: actions/cache@v4
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        # not caching node_modules because `npm ci` removes it
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: Copy secrets example file
      run: npm run copy-secrets
    - name: Prepare for Playwright tests
      run: npm run playwright:prepare-ci
    - name: Run Playwright tests
      run: npm run playwright:ci:${{ matrix.shard }}
    - name: Upload coverage to codecov
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        directory: 'playwright-coverage'
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ strategy.job-index }}
        path: |
          playwright-report/
          test-results/
        retention-days: 30

  tests-passed:
    needs: ['jest', 'playwright']
    runs-on: ubuntu-latest
    steps:
    - name: All Tests Have Passed
      run: 'echo true'

  deploy:
    if: success() && github.ref == 'refs/heads/main' # only run on main success
    needs: [tests-passed] # only run after all test jobs complete
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}
    - name: Push to ECC
      run: |
        git remote add ecc ssh://git@git.earthdata.nasa.gov:7999/edsc/edsc.git
        git fetch ecc "+refs/heads/*:refs/remotes/origin/*"

        git fetch --unshallow || true
        echo "GITHUB_COMMIT=$GITHUB_SHA"
        git push ecc $GITHUB_SHA:refs/heads/main
