name: CI

on:
  push:
    branches: [main]
  pull_request: {}

jobs:
  eslint:
    runs-on: ubuntu-latest
    strategy:
        matrix:
          node-version: ['lts/jod']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache node modules
      uses: actions/cache@v4
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: |
          ~/.npm
          node_modules/
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{github.run_number}}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Install dependencies
      run: npm ci
    - name: Run eslint
      run: npm run lint
  jest:
    needs: [eslint]
    runs-on: ubuntu-latest
    strategy:
        matrix:
          node-version: ['lts/jod']
          shard: [1/3, 2/3, 3/3]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache node modules
      uses: actions/cache@v4
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: |
          ~/.npm
          node_modules/
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{github.run_number}}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Install dependencies
      run: npm ci
    - name: Copy secrets example file
      run: npm run copy-secrets
    - name: Prepare for jest tests
      run: npm run jest:prepare-ci
    - name: Run Jest tests
      run: npm run silent-test -- --shard=${{ matrix.shard }}
    - name: Upload coverage to codecov
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  runBuild:
    needs: [eslint]
    runs-on: ubuntu-latest
    strategy:
        matrix:
          node-version: ['lts/jod']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache node modules
      uses: actions/cache@v4
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: |
          ~/.npm
          node_modules/
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{github.run_number}}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Install dependencies
      run: npm ci
    - name: Copy secrets example file
      run: npm run copy-secrets
    - name: Prepare for Playwright tests
      run: npm run playwright:prepare-ci

    - name: Run build
      run: npm run prestart-ci
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: static-build
        path: |
          static/dist/
        retention-days: 5

  playwright:
    needs: [runBuild]
    runs-on: ubuntu-latest
    strategy:
        fail-fast: false
        matrix:
          node-version: ['lts/jod']
          shard: [
            1/6,
            2/6,
            3/6,
            4/6,
            5/6,
            6/6
          ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache node modules
      uses: actions/cache@v4
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: |
          ~/.npm
          node_modules/
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}-${{github.run_number}}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Install dependencies
      run: npm ci
    - name: Copy secrets example file
      run: npm run copy-secrets
    - name: Prepare for Playwright tests
      run: npm run playwright:prepare-ci

    # - name: Install Playwright Browsers
    #   run: npx playwright install --with-deps


    # From https://github.com/microsoft/playwright/issues/7249#issuecomment-1154603556
    #
    # Cache the Playwright browser binaries so that we don't have to download
    # them every time we run the tests.
    - name: Get installed Playwright version
      id: playwright-version
      run: echo -n "::set-output name=version::$(npm ls @playwright/test --json | jq --raw-output '.dependencies["@playwright/test"].version')"

    # Attempt to restore the correct Playwright browser binaries based on the
    # currently installed version of Playwright (The browser binary versions
    # may change with Playwright versions).
    # Note: Playwright's cache directory is hard coded because that's what it
    # says to do in the docs. There doesn't appear to be a command that prints
    # it out for us.
    - name: Cache playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: '~/.cache/ms-playwright'
        key: '${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}'
        # As a fallback, if the Playwright version has changed, try use the
        # most recently cached version. There's a good chance that at least one
        # of the browser binary versions haven't been updated, so Playwright can
        # skip installing that in the next step.
        # Note: When falling back to an old cache, `cache-hit` (used below)
        # will be `false`. This allows us to restore the potentially out of
        # date cache, but still let Playwright decide if it needs to download
        # new binaries or not.
        restore-keys: |
          ${{ runner.os }}-playwright-

    # If the Playwright browser binaries weren't able to be restored, we tell
    # paywright to install everything for us.
    - name: Install Playwright Browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps

    - name: Download build
      uses: actions/download-artifact@v4
      with:
        name: static-build
        path: static/dist/

    - name: Run Playwright tests
      run: bin/start-playwright.sh ${{ matrix.shard }}
    - name: Upload coverage to codecov
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        directory: 'playwright-coverage'
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ strategy.job-index }}
        path: |
          playwright-report/
          test-results/
        retention-days: 30

  tests-passed:
    needs: ['jest', 'playwright']
    runs-on: ubuntu-latest
    steps:
    - name: All Tests Have Passed
      run: 'echo true'

  deploy:
    if: success() && github.ref == 'refs/heads/main' # only run on main success
    needs: [tests-passed] # only run after all test jobs complete
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}
    - name: Push to ECC
      run: |
        git remote add ecc ssh://git@git.earthdata.nasa.gov:7999/edsc/edsc.git
        git fetch ecc "+refs/heads/*:refs/remotes/origin/*"

        git fetch --unshallow || true
        echo "GITHUB_COMMIT=$GITHUB_SHA"
        git push ecc $GITHUB_SHA:refs/heads/main
