Resources:
  LambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for EDSC Lambda functions'
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: -1
          FromPort: 0
          ToPort: 65535
      VpcId: ${env:VPC_ID}

  # Database password secret storage
  DbPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "EDSC RDS database master password"
      GenerateSecretString:
        SecretStringTemplate: "{\"username\":\"edsc\"}"
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: "\"@/\\"

  SecretRDSInstanceAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId:
        Ref: DbPasswordSecret
      TargetId:
        Ref: EncryptedDatabase
      TargetType: AWS::RDS::DBInstance

  # RDS database
  EncryptedDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: edsc_${self:provider.stage}
      AllocatedStorage: ${env:DB_ALLOCATED_STORAGE}
      DBInstanceClass: ${env:DB_INSTANCE_CLASS}
      Engine: postgres
      EngineVersion: '14.10'
      AllowMajorVersionUpgrade: true
      MasterUsername: {"Fn::Join": ["", ["{{resolve:secretsmanager:",{"Ref": "DbPasswordSecret"},":SecretString:username}}"] ] }
      MasterUserPassword: {"Fn::Join": ["", ["{{resolve:secretsmanager:",{"Ref": "DbPasswordSecret"},":SecretString:password}}"] ] }
      MultiAZ: true
      StorageEncrypted: true
      StorageType: gp2
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VPCSecurityGroups:
        - Ref: DatabaseVpcSecurityGroup

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: EDSC DB subnet group
      SubnetIds:
        - ${env:SUBNET_ID_A}
        - ${env:SUBNET_ID_B}

  DatabaseVpcSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow Lambdas to access database
      SecurityGroupIngress:
        - SourceSecurityGroupId:
            Ref: LambdaSecurityGroup
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
      VpcId: ${env:VPC_ID}

  ServerlessAppRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      PermissionsBoundary:
        Fn::Join: [
          "", [
            "arn:aws:iam::",
            {
              "Ref": "AWS::AccountId"
            },
            ":policy/NGAPShRoleBoundary"
          ]
        ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - states.amazonaws.com
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RDSIAMAuthentication
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource:
                  Fn::Join: [
                    "", [
                        "arn:aws:rds-db:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":dbuser",
                        "/lambda"
                    ]
                  ]
        - PolicyName: EDSCLambdaBase
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
              - Effect: Allow
                Action:
                  - states:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: '*'

  # Redis Cache for browse-scaler/image-resizing
  # The CIDR notation 0.0. 0.0/0 defines an IP block containing all possible IP addresses
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Ingress for Redis Cluster
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: tcp
        FromPort: 1521
        ToPort: 1521
      VpcId: ${env:VPC_ID}

  RedisCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: browse-scaler-${self:provider.stage}
      Description: 'Redis Cache Subnet Group'
      SubnetIds:
        - ${env:SUBNET_ID_A}
        - ${env:SUBNET_ID_B}

  RedisParameterGroup:
    Type: AWS::ElastiCache::ParameterGroup
    Properties:
      CacheParameterGroupFamily: redis7
      Description: 'Redis ElasticCache Parameter Group'
      Properties:
        maxmemory-policy: allkeys-lru

  RedisElasticCacheCluster:
    DependsOn: RedisSecurityGroup
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      EngineVersion: '7.0'
      Port: 1521
      ClusterName: browse-scaler-${self:provider.stage}
      CacheNodeType: cache.t2.medium
      NumCacheNodes: 1
      # In transit encryption is not currently supported with the REDIS engine.
      # TransitEncryptionEnabled: true
      CacheParameterGroupName:
        Ref: RedisParameterGroup
      VpcSecurityGroupIds:
      - "Fn::GetAtt": RedisSecurityGroup.GroupId
      CacheSubnetGroupName:
        Ref: RedisCacheSubnetGroup

# Output the following resources so that other stacks can access the values
Outputs:
  DbPasswordSecret:
    Value:
      Ref: DbPasswordSecret
    Export:
      Name: ${self:provider.stage}-DbPasswordSecret

  EdscLambdaSecurityGroup:
    Value:
      Ref: LambdaSecurityGroup
    Export:
      Name: ${self:provider.stage}-LambdaSecurityGroup

  EDSCServerlessAppRole:
    Description: Role used to execute commands across the serverless application
    Value:
      Fn::GetAtt:
        - ServerlessAppRole
        - Arn
    Export:
      Name: ${self:provider.stage}-EDSCServerlessAppRole

  EncryptedDatabaseEndpoint:
    Value:
      Fn::GetAtt:
        - EncryptedDatabase
        - Endpoint.Address
    Export:
      Name: ${self:provider.stage}-EncryptedDatabaseEndpoint

  EncryptedDatabasePort:
    Value:
      Fn::GetAtt:
        - EncryptedDatabase
        - Endpoint.Port
    Export:
      Name: ${self:provider.stage}-EncryptedDatabasePort

  ElastiCacheEndpoint:
    Value:
      Fn::GetAtt:
        - RedisElasticCacheCluster
        - RedisEndpoint.Address
    Export:
      Name: ${self:provider.stage}-ElastiCacheEndpoint

  ElastiCachePort:
    Value:
      Fn::GetAtt:
        - RedisElasticCacheCluster
        - RedisEndpoint.Port
    Export:
      Name: ${self:provider.stage}-ElastiCachePort
