import nock from 'nock'
import * as getEarthdataConfig from '../../../../sharedUtils/config'
import regionSearch from '../handler'

const OLD_ENV = process.env

beforeEach(() => {
  jest.clearAllMocks()

  // Manage resetting ENV variables
  jest.resetModules()
  process.env = { ...OLD_ENV }
  delete process.env.NODE_ENV

  jest.spyOn(getEarthdataConfig, 'getEarthdataConfig').mockImplementation(() => ({ regionHost: 'http://region.com' }))
})

afterEach(() => {
  // Restore any ENV variables overwritten in tests
  process.env = OLD_ENV
})

describe('regionSearch', () => {
  test('returns region results when they exist', async () => {
    nock(/region/)
      .get(/region/)
      .reply(200, {
        status: '200 OK',
        hits: 1,
        time: '5.128 ms.',
        'search on': {
          parameter: 'region',
          exact: true
        },
        results: [{
          'Region Name': 'California Region',
          HUC: '18',
          'Visvalingam Polygon': '-121.63690052163548,43.34028642543558,-121.71937759754917,43.23098080164692'
        }]
      })

    const regionResponse = await regionSearch({
      queryStringParameters: {
        endpoint: 'region',
        exact: true,
        query: 'California Region'
      }
    })

    const {
      body,
      statusCode
    } = regionResponse

    expect(statusCode).toBe(200)
    expect(body).toBe(JSON.stringify({
      hits: 1,
      time: 5.128,
      results: [{
        id: '18',
        name: 'California Region',
        spatial: '-121.63690052163548,43.34028642543558,-121.71937759754917,43.23098080164692',
        type: 'huc'
      }]
    }))
  })

  test('returns huc results when they exist', async () => {
    nock(/region/)
      .get(/huc/)
      .reply(200, {
        status: '200 OK',
        hits: 1,
        time: '3.133 ms.',
        'search on': {
          parameter: 'HUC',
          exact: true
        },
        results: [{
          HUC: '1805000301',
          'Region Name': 'Upper Coyote Creek',
          'Visvalingam Polygon': '-121.71876769859176,37.348544156610956,-121.72219968921144,37.35039130244144'
        }]
      })

    const regionResponse = await regionSearch({
      queryStringParameters: {
        endpoint: 'huc',
        exact: true,
        query: '1805000301'
      }
    })

    const {
      body,
      statusCode
    } = regionResponse

    expect(statusCode).toBe(200)
    expect(body).toBe(JSON.stringify({
      hits: 1,
      time: 3.133,
      results: [{
        id: '1805000301',
        name: 'Upper Coyote Creek',
        spatial: '-121.71876769859176,37.348544156610956,-121.72219968921144,37.35039130244144',
        type: 'huc'
      }]
    }))
  })

  test('returns river reach results when they exist', async () => {
    nock(/region/)
      .get(/rivers\/reach/)
      .reply(200, {
        status: '200 OK',
        time: '3.076 ms.',
        hits: 1,
        search_on: {
          parameter: 'reach',
          exact: true,
          page_number: 1,
          page_size: 100
        },
        results: [{
          reach_id: '11410000013',
          reach_len: 12342.2,
          n_nodes: 62,
          wse: 1.5,
          wse_var: 0.165342,
          width: 150,
          width_var: 3965.85,
          facc: 740597,
          n_chan_max: 1,
          n_chan_mod: 1,
          grod_id: 0,
          slope: 0.103454,
          dist_out: 12517.4,
          lakeflag: 2,
          type: 3,
          n_rch_up: '1',
          n_rch_dn: '1',
          river_name: 'Jubba River',
          geometry: 'LINESTRING (42.60693780875592 -0.2485374466218157, 42.60699173144657 -0.248266275390432, 42.60709952797258 -0.2479951139508787, 42.60720732444942 -0.2477239524674118, 42.60731512087709 -0.2474527909400342, 42.60747679115587 -0.2471816391486546, 42.60769233530158 -0.2469104970591206, 42.60790787941923 -0.2466393548801515, 42.60817729743339 -0.2463682223566363, 42.60844670577099 -0.2461513259917906, 42.6087161141188 -0.2459344295356193, 42.60898552247683 -0.2457175329881369, 42.60925492120634 -0.2455548726530676, 42.60952431996315 -0.245392212248184, 42.60979372837105 -0.2451753154483259, 42.61006313678919 -0.2449584185572125, 42.61033253561297 -0.2447957579214961, 42.61060194406119 -0.244578860858647, 42.61087135251967 -0.2443619637045849, 42.61114075141042 -0.2441993028381482, 42.61141015032849 -0.2440366419019784, 42.61167954927387 -0.2438739808960862, 42.61194893868883 -0.2437655562314673, 42.61221831858936 -0.2437113679402763, 42.61248770808984 -0.2436029431898452, 42.61275708808441 -0.243548754834276, 42.61302646812759 -0.2434945664518782, 42.61329584821937 -0.2434403780426554, 42.61356523789615 -0.2433319531313805, 42.61383460854873 -0.2433320011437488, 42.6141039887863 -0.2432778126540723, 42.61437336907245 -0.2432236241375852, 42.61464275893077 -0.2431151990762573, 42.61491212979048 -0.2431152470241935, 42.61518151973954 -0.243006821887868, 42.61545090972866 -0.2428983967033508, 42.61572029975782 -0.2427899714706491, 42.61598968032578 -0.2427357827612951, 42.61625907044033 -0.2426273574429428, 42.61652846059491 -0.2425189320764263, 42.61679784130211 -0.2424647432653593, 42.61706722205784 -0.2424105544275239, 42.61733661234314 -0.2423021289379423, 42.61760600266845 -0.2421937034002234, 42.61787538356337 -0.2421395144607352, 42.61814475503746 -0.242139562151535, 42.61841413603258 -0.2420853731692295, 42.61868351707621 -0.2420311841601784, 42.61895289816835 -0.2419769951243853, 42.61922227930896 -0.2419228060618537, 42.61949166049808 -0.2418686169725877, 42.61976104173566 -0.2418144278565904, 42.62003041357259 -0.2418144754456502, 42.62029978546223 -0.2418145230293288, 42.62056916685161 -0.2417603338545049, 42.62083854828944 -0.2417061446529619, 42.62110792977573 -0.2416519554247036, 42.62137732074581 -0.2415435293845972, 42.62164671175584 -0.2414351032964427, 42.62191610280582 -0.2413266771602471, 42.62218551272827 -0.2411097773417046, 42.62245492266099 -0.2408928774324417, 42.622724332604 -0.240675977432473, 42.6228860029799 -0.240404821592146, 42.62299379883244 -0.2401336562465759, 42.62304772015214 -0.2398624814290189, 42.62299389245497 -0.239591287754139, 42.62283231575989 -0.2393200752845952, 42.62272461350335 -0.2390488722748708, 42.62234756688087 -0.2386149118949936, 42.62234756688087 -0.2386149118949936, 42.62213209703583 -0.2384521639185812, 42.62213209703583 -0.2384521639185812, 42.6216472829823 -0.2381266587432526, 42.62137793879405 -0.2379639015552387, 42.62110860393381 -0.2377469076510692, 42.62083926910076 -0.2375299138268523, 42.62056993429491 -0.237312920082603, 42.62030059025044 -0.2371501631611909, 42.62003123698327 -0.2370416430306654, 42.61976189302395 -0.2368788862159897, 42.61949253985046 -0.2367703661709026, 42.61922317747236 -0.2367160828634252, 42.61895381514697 -0.2366617995720215, 42.61868446212518 -0.2365532796178254, 42.61841509990416 -0.2364989963692517, 42.61814574698246 -0.2363904764792337, 42.61787639410922 -0.2362819566266484, 42.61744545546873 -0.2359564623769614, 42.61744545546873 -0.2359564623769614, 42.61728386964306 -0.2357394879917248, 42.61728386964306 -0.2357394879917248, 42.61696070716847 -0.2352513027585566, 42.61685300472226 -0.2349801011842614, 42.61663755380706 -0.2347088811503793, 42.61642210288088 -0.2344376611985175, 42.61626052613792 -0.2341664505597761, 42.61609894936711 -0.2338952399831627, 42.61588349838892 -0.2336240202577212, 42.6156680473997 -0.233352800614343, 42.61556034472262 -0.233081599435326, 42.61545264200502 -0.2328103982981234, 42.61539881340114 -0.2325392063730193, 42.61539885890157 -0.2322680236285657, 42.61545277850322 -0.2319968500326924, 42.61545282389643 -0.2317256672773221, 42.61545286923656 -0.2314544845218386, 42.61545291452359 -0.2311833017662421, 42.61539908560729 -0.2309121099045997, 42.61534525664204 -0.2306409180640196, 42.61529142762785 -0.2303697262445026, 42.61523759856472 -0.2300985344460495, 42.61518376945263 -0.2298273426686613, 42.61518381442617 -0.2295561599658428, 42.6151838593466 -0.2292849772629122, 42.61518390421394 -0.2290137945598695, 42.61518394902819 -0.2287426118567151, 42.61518399378933 -0.2284714291534492, 42.61518403849738 -0.2282002464500715, 42.61513020902379 -0.2279290547572266, 42.61507637950123 -0.2276578630854505, 42.61502254992969 -0.227386671434744, 42.61496872030917 -0.2271154798051079, 42.61491489063967 -0.2268442881965431, 42.61491493503411 -0.2265731055459582, 42.61491497937547 -0.2263019228952627, 42.61491502366371 -0.2260307402444567, 42.61491506789885 -0.2257595575935403, 42.61491511208089 -0.2254883749425137, 42.61491515620982 -0.225217192291377, 42.61491520028564 -0.2249460096401304, 42.61491524430836 -0.2246748269887739, 42.61491528827798 -0.2244036443373076, 42.61491533219449 -0.224132461685732, 42.6149153760579 -0.2238612790340468, 42.61496929397234 -0.2235901052013429, 42.61502321183382 -0.2233189313469463, 42.61507712964233 -0.223047757470858, 42.61518492150753 -0.2227765923592991, 42.61529271332414 -0.222505427204073, 42.61534663097607 -0.222234253241137, 42.6154544226923 -0.2219630880096716, 42.61556221435998 -0.2216919227345474, 42.6156700059791 -0.2214207574157674, 42.61577779754969 -0.2211495920533345, 42.61593946320409 -0.2208784353558795, 42.61604725468086 -0.2206072698950693, 42.61620892025007 -0.2203361130768872, 42.61631671163305 -0.2200649475177157, 42.61647837711712 -0.2197937905788276, 42.61664003396901 -0.2195768701730574, 42.61685556496412 -0.2193599583596277, 42.61685556496412 -0.2193599583596277, 42.61723275275708 -0.218926125891268, 42.61734053536006 -0.2187091966369443, 42.61739445229864 -0.2184380221093682, 42.61744836918434 -0.2181668475601284, 42.61750228601719 -0.2178956729892257, 42.61761007698339 -0.2176245069710266, 42.61777174209276 -0.2173533494723296, 42.61793340716232 -0.2170821919077068, 42.61809507219209 -0.2168110342771651, 42.61820286297437 -0.2165398680513807, 42.61831065370824 -0.2162687017820086, 42.61836457018155 -0.2159975269616536, 42.61841848660204 -0.2157263521196468, 42.61841852875736 -0.2154551687701366, 42.61841857085966 -0.2151839854205211, 42.61841861290893 -0.2149128020708007, 42.61841865490517 -0.2146416187209753, 42.61836482264194 -0.2143704269277083, 42.61831099032968 -0.2140992351554999, 42.61825715796839 -0.2138280434043507, 42.6181494513629 -0.2135568432621949, 42.61798787052869 -0.2132856347599276, 42.61788016384672 -0.2130144347117682, 42.61771858294844 -0.2127432263239142, 42.61755700202176 -0.212472017998331, 42.61739542106666 -0.2122008097350251, 42.61728771423677 -0.2119296098852108, 42.61712613321753 -0.211658401736363, 42.61696455216985 -0.211387193649811, 42.6168029710937 -0.2111159856255615, 42.61664138998909 -0.2108447776636211, 42.61642593473869 -0.2105735614633862, 42.61621047947644 -0.2103023453455341, 42.61599502420235 -0.2100311293100763, 42.61572569482932 -0.2097599050860432, 42.61545636546528 -0.2094886809641265, 42.61518703611021 -0.2092174569443445, 42.61497158081671 -0.2089462412684215, 42.6147561255113 -0.2086750256749571, 42.61454067019397 -0.2084038101639631, 42.6143252148647 -0.2081325947354511, 42.61410975952349 -0.207861379389433, 42.61389430417032 -0.2075901641259204, 42.61373272280364 -0.2073189571267229, 42.61357114140836 -0.2070477501899492, 42.61340955998446 -0.2067765433156057, 42.61330185251074 -0.2065053446548749, 42.61314027102231 -0.2062341378952632, 42.61292481554094 -0.2059629230672236, 42.61270936004752 -0.20569170832176, 42.61249390454208 -0.2054204936588838, 42.61222457509049 -0.2051492709774592, 42.61195524564769 -0.2048780483984123, 42.61168591621365 -0.2046068259217612, 42.61141658678839 -0.2043356035475242, 42.61114725737187 -0.2040643812757194, 42.61087792796409 -0.2037931591063652, 42.61060859856504 -0.2035219370394795, 42.61033926917469 -0.2032507150750808, 42.61006993979305 -0.2029794932131871, 42.6098006024631 -0.2027625077824139, 42.60953124925405 -0.2026539950685686, 42.60926189609302 -0.2025454823930622, 42.60899254298 -0.2024369697559018, 42.60872318991502 -0.2023284571570948, 42.60845384483823 -0.2021657083216031, 42.60818451566357 -0.201894487017221, 42.60796906025054 -0.2016232737918252, 42.60775360482528 -0.2013520606492462, 42.60759202312416 -0.2010808555456561, 42.60743044139417 -0.2008096505047073, 42.60732273335932 -0.200538453462009, 42.60721502528321 -0.2002672564614039, 42.60716119088172 -0.1999960674175791, 42.60705348271796 -0.1997248704907981, 42.60699964822069 -0.1994536814998807, 42.606945813674 -0.1991824925301439, 42.60689197907792 -0.1989113035815887, 42.60683814443244 -0.1986401146542157, 42.60689205713541 -0.19836894145061, 42.60694596978548 -0.1980977682252741, 42.60699988238263 -0.197826594978209, 42.60705379492688 -0.1975554217094153, 42.60716158112534 -0.1972842562263057, 42.60721549356504 -0.1970130829031552, 42.60726940595184 -0.1967419095582792, 42.60737719199874 -0.1964707439662088, 42.60753885171585 -0.1961995860937179, 42.60764663766961 -0.1959284204031754, 42.60780829730248 -0.195657262409897, 42.60802383063093 -0.195386112080147, 42.60823936393315 -0.1951149616617317, 42.60845489720914 -0.1948438111546628, 42.60867043045891 -0.194572660558952, 42.6091014892612 -0.1940845954030053, 42.6091014892612 -0.1940845954030053, 42.60931701483428 -0.1938676808599756, 42.60931701483428 -0.1938676808599756, 42.60980193976221 -0.1934338592063259, 42.61007133155115 -0.1932711884170202, 42.61034073094513 -0.1930542812083796, 42.6106101303512 -0.1928373739096776, 42.61087952976933 -0.1926204665209287, 42.61109505535115 -0.192403551440505',
          geojson: {
            type: 'LineString',
            coordinates: [[42.60693780875592, -0.2485374466218157]],
            shp_origin: 'af_apriori_rivers_reaches_hb11_v08.shp',
            netcdf_origin: 'af_apriori_rivers_v08.nc'
          }
        }]
      })

    const regionResponse = await regionSearch({
      queryStringParameters: {
        endpoint: 'rivers/reach',
        exact: true,
        query: '11410000013'
      }
    })

    const {
      body,
      statusCode
    } = regionResponse

    expect(statusCode).toBe(200)
    expect(body).toBe(JSON.stringify({
      hits: 1,
      time: 3.076,
      results: [{
        id: '11410000013',
        name: 'Jubba River',
        spatial: '42.60693780875592,-0.2485374466218157',
        type: 'reach'
      }]
    }))
  })

  test('returns error when a warning is received', async () => {
    nock(/region/)
      .get(/huc/)
      .reply(413, {
        error: 'Your query has returned 16575 results (> 100). If you\'re searching a specific HUC, use the parameter \'exact=True\'.Otherwise, refine your search to return less results, or head here: https://water.usgs.gov/GIS/huc.html to download mass HUC data.'
      })

    const regionResponse = await regionSearch({
      queryStringParameters: {
        endpoint: 'hucs',
        exact: false,
        query: '10'
      }
    })

    const {
      body,
      statusCode
    } = regionResponse

    expect(statusCode).toBe(413)
    expect(body).toBe(JSON.stringify({
      statusCode: 413,
      errors: ['Your query has returned 16575 results (> 100). If you\'re searching a specific HUC, use the parameter \'exact=True\'.Otherwise, refine your search to return less results, or head here: https://water.usgs.gov/GIS/huc.html to download mass HUC data.']
    }))
  })

  test('returns error when a failure is received', async () => {
    nock(/region/)
      .get(/huc/)
      .reply(500)

    const regionResponse = await regionSearch({
      queryStringParameters: {
        endpoint: 'hucs',
        exact: false,
        query: '10'
      }
    })

    const {
      body,
      statusCode
    } = regionResponse

    expect(statusCode).toBe(500)
    expect(body).toBe(JSON.stringify({
      statusCode: 500,
      errors: ['Unknown Error']
    }))
  })

  test('returns an error when one is present', async () => {
    process.env.LAMBDA_TIMEOUT = 30

    nock(/region/)
      .get(/region/)
      .reply(500, {
        error: 'Cras justo odio, dapibus ac facilisis in, egestas eget quam.'
      })

    const regionResponse = await regionSearch({
      queryStringParameters: {
        endpoint: 'region',
        exact: true,
        query: 'California Region'
      }
    })

    const {
      body,
      statusCode
    } = regionResponse

    expect(statusCode).toBe(500)
    expect(body).toBe(JSON.stringify({
      statusCode: 500,
      errors: ['Cras justo odio, dapibus ac facilisis in, egestas eget quam.']
    }))
  })

  test('returns error when a page not found is encountered', async () => {
    nock(/region/)
      .get(/huc/)
      .reply(200, "<!doctype html><html><head><title>Page not found</title></head></html>")

    const regionResponse = await regionSearch({
      queryStringParameters: {
        endpoint: 'hucs',
        exact: false,
        query: 'two'
      }
    })

    const {
      body,
      statusCode
    } = regionResponse

    expect(statusCode).toBe(500)
    expect(body).toBe(JSON.stringify({
      statusCode: 500,
      errors: ['Unknown Error']
    }))
  })
})
