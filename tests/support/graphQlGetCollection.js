/**
 * Return the GraphQl query for verifying the request is what we expect inside of cy.intercept
 * @param {String} conceptId conceptId to retrieve
 */
export const graphQlGetCollection = (conceptId) => `{"query":"\\n    query GetCollection(\\n      $params: CollectionInput, $subcriptionParams: SubscriptionsInput, $variableParams: VariablesInput\\n    ) {\\n      collection (params: $params) {\\n        abstract\\n        archiveAndDistributionInformation\\n        associatedDois\\n        boxes\\n        cloudHosted\\n        conceptId\\n        coordinateSystem\\n        dataCenter\\n        dataCenters\\n        directDistributionInformation\\n        doi\\n        duplicateCollections {\\n          count\\n          items {\\n            id\\n          }\\n        }\\n        hasGranules\\n        lines\\n        nativeDataFormats\\n        points\\n        polygons\\n        relatedUrls\\n        relatedCollections (\\n          limit: 3\\n        ) {\\n          count\\n          items {\\n            id\\n            title\\n          }\\n        }\\n        scienceKeywords\\n        shortName\\n        spatialExtent\\n        tags\\n        temporalExtents\\n        timeStart\\n        timeEnd\\n        tilingIdentificationSystems\\n        title\\n        versionId\\n        services {\\n          count\\n          items {\\n            conceptId\\n            longName\\n            name\\n            type\\n            url\\n            serviceOptions\\n            supportedOutputProjections\\n            supportedReformattings\\n          }\\n        }\\n        granules {\\n          count\\n          items {\\n            conceptId\\n            onlineAccessFlag\\n          }\\n        }\\n        subscriptions (\\n          params: $subcriptionParams\\n        ) {\\n          count\\n          items {\\n            collectionConceptId\\n            conceptId\\n            name\\n            nativeId\\n            query\\n            type\\n          }\\n        }\\n        tools {\\n          count\\n          items {\\n            longName\\n            name\\n            potentialAction\\n          }\\n        }\\n        variables (\\n          params: $variableParams\\n        ) {\\n          count\\n          cursor\\n          items {\\n            conceptId\\n            definition\\n            instanceInformation\\n            longName\\n            name\\n            nativeId\\n            scienceKeywords\\n          }\\n        }\\n      }\\n    }","variables":{"params":{"conceptId":"${conceptId}","includeHasGranules":true,"includeTags":"edsc.*,opensearch.granule.osdd"},"subcriptionParams":{},"variableParams":{"limit":2000}}}`
